---
# Decommission block

- name: "AWS | EC2 | Get Auto Scaling Group infos, to know which LC to delete later"
  ec2_asg_info:
    name: "{{ ecs_asg_name }}"
    region: "{{ ecs_ec2_region }}"
  register: ec2_asg

# Decommision the EC2 Auto Scaling Group
- name: "AWS | EC2 | Decomission the EC2 Auto Scaling Group"
  ec2_asg:
    name: "{{ ecs_asg_name }}"
    state: absent

# Decommision the EC2 Launch Configuration
- name: "AWS | EC2 | Decomission the EC2 Launch Configuration"
  ec2_lc:
    name: "{{ ec2_asg.results.0.launch_configuration_name }}"
    state: absent
  when: ec2_asg.results.0 is defined

# Decommision the IAM policy
- name: "AWS | IAM | Detach IAM inline policy to IAM role to also create LogGroups on CloudWatch"
  iam_policy:
    iam_type: role
    iam_name: "{{ ecs_instance_iam_role }}"
    policy_name: "cloudwatch_create_log_group"
    policy_json: '{"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup"], "Resource": "*"}]}'
    state: absent

# Decommision the IAM role
- name: "AWS | IAM | Delete IAM role needed for cluster EC2 instances access to AWS EC2 services"
  iam_role:
    name: "{{ ecs_instance_iam_role }}"
    state: absent

# Remove the ALB
- name: Delete load balancer
  elb_application_lb:
    name: dev-alb
    state: absent

- pause:
    seconds: 30

# Delete the target group
- name: Delete target group
  elb_target_group:
    name: dev-alb-tg
    vpc_id: "{{ vpc_id }}"
    protocol: http
    port: "{{ ecs_container_port }}"
    state: absent
- pause:
    seconds: 30


#update the service as you would do in console or cli,
- name: get ecs service details
  ecs_service_facts:
    cluster: "{{ ecs_cluster_name }}"
    service: "{{ ecs_srvc_name }}"
    details: true
  register: ecs_service_facts_output

- set_fact:
    loadbalancers: "{{ ecs_service_facts_output.services[0].loadBalancers }}"
  when: ecs_service_facts_output.services | count
# so that desired count is set to 0
- ecs_service:
    name: "{{ ecs_srvc_name }}"
    state: present
    cluster: "{{ ecs_cluster_name }}"
    load_balancers: "{{ loadbalancers }}"
    desired_count: 0
    task_definition: "{{ ecs_task_name }}"
- name: "AWS | ECS | Decommission the service"
  ecs_service:
    name: "{{ ecs_srvc_name }}"
    state: absent
    cluster: "{{ ecs_cluster_name }}"

# Decomission the ECS cluster
- name: "AWS | ECS | Decommission the cluster"
  ecs_cluster:
    name: "{{ ecs_cluster_name }}"
    state: absent

