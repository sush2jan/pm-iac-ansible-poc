# tasks/ecs/facts.yml
# ---
# sets facts for some important IDs and IPs of our VPC for the ECS cluster
# find the VPC by name
- name: VPC facts
  ec2_vpc_net_facts:
    filters:
      "tag:Name": "{{ vpc_name }}"
  register: vpc_facts

# parse the facts output and extract the VPC ID
- name: "set fact: VPC ID"
  set_fact:
    vpc_id: "{{ vpc_facts.vpcs[0].id }}"

# find our subnets by VPC ID that was just defined
- name: VPC subnet facts
  ec2_vpc_subnet_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
      "tag:Name":
        - public-a
        - public-b
  register: vpc_subnet_facts

# parse the facts output and extract the IDs with some fancy filter work:
# - iterate each subnet found by the facts query
# - for that subnet, define a "name: id" entry in the `vpc_subnet_ids` dictionary (or empty dictionary if it doesn't exist)
- name: "set facts: VPC subnet IDs"
  set_fact:
    ecs_subnet_ids: "{{ vpc_subnet_facts.subnets  | map(attribute='id') | list }}"

# find our security groups by VPC ID
- name: VPC security group facts
  ec2_group_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
  register: vpc_security_group_facts


# parse the facts output and extract the IDs with some fancy filter work:
# - iterate each security group found by the facts query
# - for that group, define a "name: id" entry in the `ecs_security_group_ids` dictionary (or empty dictionary if it doesn't exist)
- name: "Set facts: ECS security group IDs"
  set_fact:
    ecs_security_group_ids: "{{ vpc_security_group_facts.security_groups | map(attribute='group_id') | list }}"