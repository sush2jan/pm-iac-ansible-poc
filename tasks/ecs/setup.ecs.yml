---
# Check pre-requisites
- import_tasks: pre-requisites.yml

# Cluster: A logical grouping of container instances that you can place tasks on
- name: "AWS | ECS | Provision the cluster"
  ecs_cluster:
    name: "{{ ecs_cluster_name }}"
    state: present
  register: ecs_cluster

- debug: var=ecs_cluster verbosity=3

# Setup services on your now running cluster, using the Ansible modules for ECS, like this:
- name: Create task definition for a service running in docker container(s)
  ecs_taskdefinition:
    family: "api_gateway"
    containers:
#      - name: "{{ ecs_task_name }}"
      - name: "api_gateway"
        cpu: 2
        memory: 500
        image: "foo:bar"
        portMappings:
          - containerPort: "{{ ecs_container_port }}"
        #    hostPort: "{{ ecs_host_port }}"
        # needs more params here, see docs
        logConfiguration:
          logDriver: awslogs
          options:
            awslogs-group: "/ecs/api-gateway"
            awslogs-region: "{{ ecs_ec2_region }}"
            awslogs-stream-prefix: ecs
    region: "{{ ecs_ec2_region }}"
    state: present
  register: api_gateway_task_definition

- name: Create task definition for a service running in docker container(s)
  ecs_taskdefinition:
    family: "service_discovery"
    containers:
      #      - name: "{{ ecs_task_name }}"
      - name: "service_discovery"
        cpu: 2
        memory: 500
        image: "foo:bar"
        portMappings:
          - containerPort: "8761"
        #    hostPort: "{{ ecs_host_port }}"
        # needs more params here, see docs
        logConfiguration:
          logDriver: awslogs
          options:
            awslogs-group: "/ecs/service-discovery"
            awslogs-region: "{{ ecs_ec2_region }}"
            awslogs-stream-prefix: ecs
    region: "{{ ecs_ec2_region }}"
    state: present
  register: service_discovery_task_definition

- name: Get target group arn
  elb_target_group_facts:
    region: "{{ ecs_ec2_region }}"
    names:
      - "{{ aws_env }}-{{ ecs_tg_name }}"
  register: tg

- debug: var=tg verbosity=3

- name: Create api-gateway service running on the ECS cluster
  ecs_service:
    state: present
    name: "api-gateway-ecs-service"
    desired_count: 2
    cluster: "{{ ecs_cluster_name }}"
    task_definition: "{{ api_gateway_task_definition.taskdefinition.taskDefinitionArn }}"
    region: "{{ ecs_ec2_region }}"
    load_balancers:
      - targetGroupArn: "{{ tg.target_groups[0].target_group_arn }}"
        containerName: "api_gateway"
        containerPort: "{{ ecs_container_port }}"

- name: Create service-discovery service running on the ECS cluster
  ecs_service:
    state: present
    name: "service-discovery-ecs-service"
    desired_count: 2
    cluster: "{{ ecs_cluster_name }}"
    task_definition: "{{ service_discovery_task_definition.taskdefinition.taskDefinitionArn }}"
    region: "{{ ecs_ec2_region }}"
    load_balancers:
      - targetGroupArn: "{{ tg.target_groups[0].target_group_arn }}"
        containerName: "service_discovery"
        containerPort: "8761"

# Permissions: IAM role for permissions on EC2 instances
- name: "AWS | IAM | Create IAM role needed for cluster EC2 instances access to AWS EC2 services"
  iam_role:
    name: "{{ ecs_instance_iam_role }}"
    description: "Role for EC2 instances that are part of EC2 clusters"
    assume_role_policy_document: "{{ lookup('file', 'iam_trust_policy.json')  }}"
    managed_policy:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
    state: present
  register: iam_machine_role

- debug: var=iam_machine_role verbosity=2

- name: Wait for IAM role to become available
  pause:
    seconds: 10
  when: iam_machine_role.changed

# Permissions: Add CloudWatch policy to IAM role, as we create new LogGroups from the instance, see awslog config setup through user_data
- name: "AWS | IAM | Attach IAM inline policy to IAM role to also create LogGroups on CloudWatch"
  iam_policy:
    iam_type: role
    iam_name: "{{ iam_machine_role.iam_role.role_name }}"
    policy_name: "cloudwatch_create_log_group"
    policy_json: '{"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup"], "Resource": "*"}]}'
    state: present

# Container Instances: Define a EC2 Launch Configuration to create EC2 instances in an ASG that run the ECS agent
# Try to find a matching Launch config first for given AMI ID and instance type combo, if not found create a new one
# to update ASG with it and roll over to new image/instance type.

- name: "AWS | EC2 | Retrieve existing EC2 Launch configurations to see if need to create one"
  ec2_lc_info:
    sort: created_time
    region: "{{ ecs_ec2_region }}"
  register: ec2_lc_list

- name: "Local | Extract Launch Configs from List that match given AMI ID"
  set_fact:
    ec2_lc_existing: "{{ ec2_lc_list.launch_configurations | selectattr('image_id', 'equalto', ecs_ami_id) | list }}"
  when: (ec2_lc_list.launch_configurations | length) > 0

- name: "Local | Of AMI matching Launch Configs select one that also matches instance type"
  set_fact:
    ec2_lc_usable: "{{ ec2_lc_existing | selectattr('instance_type', 'equalto', ecs_instance_type) | list | last }}"
  when: ec2_lc_existing is defined and (ec2_lc_existing | length) > 0

- name: "AWS | EC2 | Create a new EC2 Launch Configuration for ECS use (if non was found)"
  ec2_lc:
    name: "{{ ecs_cluster_name }}-lc-{{ lookup('pipe', 'date +%Y%m%d-%H%M') }}"
    image_id: "{{ ecs_ami_id }}"
    key_name: "{{ ecs_ssh_key_name }}"
    security_groups: "{{ ecs_security_group_ids }}"
    instance_type: "{{ ecs_instance_type }}"
    instance_monitoring: "{{ ecs_instance_monitoring }}"
    instance_profile_name: "arn:aws:iam::{{ aws_account_id }}:instance-profile/{{ ecs_instance_iam_role }}"
    assign_public_ip: "{{ ecs_assign_public_ip }}"
    user_data: "{{ ecs_userdata }}"
    region: "{{ ecs_ec2_region }}"
    state: present
  register: ec2_new_lc
  when:
    - ec2_lc_usable is undefined

- name: Set launch config name (to either existing or newly created one)
  set_fact:
    ec2_ecs_lc_name: "{{ ec2_lc_usable.launch_configuration_name }}"
  when:
    - ec2_lc_usable is defined
    - ec2_lc_usable.launch_configuration_name is defined
- set_fact:
    ec2_ecs_lc_name: "{{ ec2_new_lc.name }}"
  when:
    - ec2_new_lc is defined
    - ec2_new_lc.name is defined

- debug: var=ec2_ecs_lc_name verbosity=1

# Container Instances: Define an Auto Scaling Group to manage creating/terminating EC2 instances
- name: "AWS | EC2 | Define a EC2 Auto Scaling Group for ECS use"
  ec2_asg:
    name: "{{ ecs_asg_name }}"
    health_check_period: "{{ ecs_asg_health_check_period }}"
    health_check_type: "{{ ecs_asg_health_type }}"
    default_cooldown: "{{ ecs_asg_default_cooldown }}"
    replace_all_instances: "{{ ecs_asg_replace_all_instances }}"
    launch_config_name: "{{ ec2_ecs_lc_name }}"
    min_size: "{{ ecs_asg_min_size }}"
    max_size: "{{ ecs_asg_max_size }}"
    desired_capacity: "{{ ecs_asg_desired_capacity }}"
    vpc_zone_identifier: "{{ ecs_subnet_ids }}"
    tags: "{{ ecs_ec2_tags }}"
    wait_for_instances: true
    region: "{{ ecs_ec2_region }}"
    state: present
  register: ec2_asg

- debug: var=ec2_asg verbosity=2

